/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.Biblioteca;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Libro;
import modelo.Usuario;

/**
 *
 * @author USUARIO
 */
public class Alquilar extends javax.swing.JPanel {

   Biblioteca miBiblio;
   DefaultComboBoxModel modelo;
    
    
    public Alquilar(Biblioteca miBiblio) {
 
        initComponents();
        this.miBiblio= miBiblio;
        modelo= new DefaultComboBoxModel();
        cargarDatos();
        cmbLibros.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consulta1 = new vista.Consulta();
        jLabel1 = new javax.swing.JLabel();
        lblLibro = new javax.swing.JLabel();
        cmbLibros = new javax.swing.JComboBox<>();
        lblNombreUsuario = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        btnAlquilar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        javax.swing.GroupLayout consulta1Layout = new javax.swing.GroupLayout(consulta1);
        consulta1.setLayout(consulta1Layout);
        consulta1Layout.setHorizontalGroup(
            consulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        consulta1Layout.setVerticalGroup(
            consulta1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Alquilar_Libros");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(156, 64, 497, 60));

        lblLibro.setText("Libro :");
        add(lblLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 172, -1, -1));

        cmbLibros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(cmbLibros, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 167, 309, -1));

        lblNombreUsuario.setText("Nombre Usuario:");
        add(lblNombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 237, -1, -1));
        add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 233, 309, -1));

        btnAlquilar.setText("Alquilar");
        btnAlquilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlquilarActionPerformed(evt);
            }
        });
        add(btnAlquilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 321, -1, -1));

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 321, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
       limpiar();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAlquilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlquilarActionPerformed
        //estas variables primero son creadas para capturar los datos
        String nombre = txtNombre.getText().trim();
        Libro l;
        Usuario u;
        
        int existe= miBiblio.busqueda(nombre);
        if(existe== -1){//dentro de este if controlo todos los posibles fallos
        //me sale el mensaje de que el usuario no existe
            JOptionPane.showMessageDialog(this,"Usuario no Existe",
                    "Error",JOptionPane.ERROR_MESSAGE);
            //por lo tanto borro todo y obligo al usuario a ingresar los datos de nuevo
            txtNombre.setText("");
            //y ubico el cursor en el campo de nuevo
            txtNombre.requestFocus();;
            
        }else{

            // Primero vamos a comprobar que tengamos algún elemento seleccionado
            // puede resultar que hayamos prestado todos los libros y no tengamos nada
            //cargado en el JCombo, por lo que daria un errror de JavaNullPointerException
                        
            if(cmbLibros.getSelectedIndex()!=-1){
            // getElementoAt(posicion) Devuelve el objeto que se encuentra en ese posicióm
            // getSelectedIndex Devuelve el indice del elemento seleccionado
            //hago un casteo por que el siguiente codigo me lanza un objeto
                l= (Libro) modelo.getElementAt(cmbLibros.getSelectedIndex());
            
                //Aqui le indico que este libro que pasa a ser prestado
                
                l.setPrestado(true);
                // indico el usuario que va a alquilar el libro con la variable existe
                u= miBiblio.getUsuario().get(existe);
                //una vez indicado el usuario le agrego el objeto alquilado
                u.getPrestados().add(l);
                //si se realiza todo correctamente sale este mensaje
                JOptionPane.showMessageDialog(this,"Prestamo realizado","Informacion",
                JOptionPane.INFORMATION_MESSAGE);
                
                limpiar();
            }else{
            //del index principal recibe -1 y saltara este mensaje indicando que no hay libros para prestar
                            JOptionPane.showMessageDialog(this, " No hay libros para prestar", 
                               "Información", JOptionPane.INFORMATION_MESSAGE);      

            
            }
        
        
        }
        
        
        
        
    }//GEN-LAST:event_btnAlquilarActionPerformed

    
        private void cargarDatos() {
        ArrayList<Libro> libros = miBiblio.getLibro();
        for (int pos = 0; pos < libros.size(); pos++) {
            if (!libros.get(pos).isPrestado()) // Si el libro no está prestado se añade
            {
                modelo.addElement(libros.get(pos));
            }
        }
    }
        
        private void limpiar(){
    txtNombre.setText("");
    // limpio el modelo.
    modelo.removeAllElements();
    // Volver a cargar los datos con libros disponibles.
    cargarDatos();
    
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlquilar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JComboBox<String> cmbLibros;
    private vista.Consulta consulta1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblLibro;
    private javax.swing.JLabel lblNombreUsuario;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
